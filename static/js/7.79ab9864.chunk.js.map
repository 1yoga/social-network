{"version":3,"sources":["Components/common/FormsControls/FormControls.module.css","utils/validators/validators.js","Components/common/FormsControls/FormsControls.js","Components/Login/Login.jsx"],"names":["module","exports","required","value","maxLengthCreator","maxLenght","length","FormControl","input","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","restProps","child","Input","createField","placeholder","name","validators","component","text","validate","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,iCCDzH,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,+KAEEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,2GAAN,OAA6BA,EAA7B,wD,oMCD5BE,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC3CC,EAAWH,GAAWC,EAC5B,OACI,sBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,IAAtE,UACI,8BACKC,IAEJC,GAAY,qCAAQF,EAAR,WAMZM,EAAW,SAACC,GACrB,IAAOV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MAApB,YAA2CF,EAA3C,2BACA,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aAAwB,oDAAcV,GAAWW,QAG/CE,EAAQ,SAACH,GAClB,IAAOV,EAAoCU,EAApCV,MAAuBW,GAAaD,EAA7BT,KAA6BS,EAAvBE,MAApB,YAA2CF,EAA3C,2BACA,OAAO,cAACX,EAAD,2BAAiBW,GAAjB,aAAwB,iDAAWV,GAAWW,QAG5CG,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CR,EAA3C,uDAAmD,GAAIS,EAAvD,uDAA8D,GAA9D,OACvB,gCACI,cAAC,IAAD,aAAOJ,YAAaA,EAAaK,SAAUH,EAAYD,KAAMA,EAAME,UAAWA,GAAeR,IADjG,IAC2GS,O,iCC7B/G,2FAuBME,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAdL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcrB,EAAW,EAAXA,MAC9B,OAAO,uBAAMsB,SAAUD,EAAhB,UACFV,YAAY,SAAU,QAAS,CAACpB,KAAWmB,KAC3CC,YAAY,uCAAU,WAAY,CAACpB,KAAWmB,IAAO,CAACa,KAAM,aAC5DZ,YAAY,KAAM,aAAc,GAAID,IAAO,CAACa,KAAM,YAAa,0DAC/DvB,GAAS,qBAAKG,UAAWC,IAAOoB,iBAAvB,SACLxB,IAEL,8BACI,4EA0BGyB,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,WAA1BJ,EAnBD,SAAClB,GAKX,OAAIA,EAAMoB,OACC,cAAC,IAAD,CAAUG,GAAI,aAGlB,gCACH,uCACA,cAACZ,EAAD,CAAgBI,SAVH,SAACS,GACdxB,EAAMsB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/7.79ab9864.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__18I32\",\"error\":\"FormControls_error__1Zie4\",\"formSummaryError\":\"FormControls_formSummaryError__3z-b4\"};","export const required = (value) => {\r\n    if (value) return undefined;\r\n    return \"Поле обязательно для заполнения\"\r\n}\r\nexport const maxLengthCreator = (maxLenght) => (value) => {\r\n    if (value.length > maxLenght) return `Максимальная длина ${maxLenght} символов`;\r\n    return undefined;\r\n}","import React from \"react\"\r\nimport styles from \"./FormControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>\"{error}\"</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder} validate={validators} name={name} component={component} {...props}/> {text}\r\n    </div>\r\n)\r\n\r\n","import React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-redusers\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"./../common/FormsControls/FormControls.module.css\"\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        {createField(\"E-mail\", \"email\", [required], Input)}\r\n        {createField(\"Пароль\", \"password\", [required], Input, {type: \"password\"})}\r\n        {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"Запомнить\")}\r\n        {error && <div className={styles.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button>Войти</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: \"login\"})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)"],"sourceRoot":""}